mz=c(269.1109, 137.0686, 130.0476, 135.0961, 181.1396, 116.0325, 176.1140, 185.0975, 556.2771, 211.0889, 210.1291),
rt=c(98.4, 124.2, 150.0, 295.8, 350.4, 49.8, 216.0, 66.0, 198.6, 93.6, 212.4),
stringsAsFactors = F),
hneg=data.frame(ID=c('Adenosine-2-d1 (M+H)', 'Adenine-2-d1 (M+H)', '2-aminoethane-d4-sulfonic acid(taurine-d4) (M+H)',
'Creatinine-(methyl-d3) (M+H)', 'L-arginine-13C6 (M+H)', 'Uracil-2-13C,15N2 (M+H)',
'L-phenylalanine-13C9,15N (M+H)', 'N-benzoyl-d5-glycine (hippuric acid) (M+H)', 'Leucine Enkephalin (M+H)',
'D-Sorbitol-13C6 (M+Na)', 'L-tryptophan-(indole-d5) (M+H)'),
mz=c(269.1109, 137.0686, 130.0476, 135.0961, 181.1396, 116.0325, 176.1140, 185.0975, 556.2771, 211.0889, 210.1291),
rt=c(98.4, 124.2, 150.0, 295.8, 350.4, 49.8, 216.0, 66.0, 198.6, 93.6, 212.4),
stringsAsFactors = F)
)
)
iicst
icst
names(icst)
names(icst[[1]])
runApp()
runApp()
tab_ind
tab_ind$ichron
tab_ind$ichron
insertUI(
selector = "#tabs_in",
where = "afterEnd",
ui = uiT_ichron
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pc_act()
dats=pc_act()
print(dats)
output$selection <- renderText({
paste('Signal:', raw_data()[[4]], 's', round(dats$x[1], 4), 'm/z')
})
print('updating feature information')
updateNumericInput(session, inputId='in_rt', value=raw_data()[[4]])
updateNumericInput(session, inputId='in_mz', value=round(dats$x[1], 4))
updateNumericInput(session, inputId='in_noisethr', value=round(as.numeric(raw_data()[[5]])))
print('get feature information')
mf=raw_data()[[1]]
as.numeric(input$in_rt)
as.numeric(input$in_mz)
print('click on mass spectrum')
updateRadioButtons(session, 'target_input',  selected='click')
dats=pc_act()
print(dats)
output$selection <- renderText({
paste('Signal:', raw_data()[[4]], 's', round(dats$x[1], 4), 'm/z')
})
print('updating feature information')
updateNumericInput(session, inputId='in_rt', value=raw_data()[[4]])
updateNumericInput(session, inputId='in_mz', value=round(dats$x[1], 4))
updateNumericInput(session, inputId='in_noisethr', value=round(as.numeric(raw_data()[[5]])))
mf=raw_data()[[1]]
dim(mf)
target.rt=as.numeric(input$in_rt)
target.mz=as.numeric(input$in_mz)
# create sub with fixed equidist window size from target signal
wind.rt=input$in_rt_ws/2
wind.mz=input$in_mz_ws/2
ra.rt=c(max(target.rt-wind.rt, min(mf$scantime)), min(target.rt+wind.rt, max(mf$scantime)))
ra.mz=c(max(target.mz-wind.mz, min(mf$mz)), min(target.mz+wind.mz, max(mf$mz)))
idx=which(mf$mz>ra.mz[1] & mf$mz<ra.mz[2] & mf$scantime>ra.rt[1] & mf$scantime<ra.rt[2])
print(length(idx))
sub=mf[idx,]
dim(sub)
input$in_noisethr
noi=input$in_noisethr
print(noi)
df=sub
ggplot()+
geom_point(data=subset(df, Int<=noi), aes(scantime, mz, colour=Int), size=0.1)+
geom_point(data=subset(df, Int>noi), aes(scantime, mz, colour=Int), size=1)+
theme_bw()+
labs(x='Scantime (s)', y='m/z', colour='Int',  caption='Raw Data')
is.null(input$raw_trans)
input$raw_trans
g1=ggplot()+
geom_point(data=subset(df, Int<=noi), aes(scantime, mz, colour=Int), size=0.1)+
geom_point(data=subset(df, Int>noi), aes(scantime, mz, colour=Int), size=1)+
theme_bw()+
labs(x='Scantime (s)', y='m/z', colour='Int',  caption='Raw Data')
g1+scale_colour_gradientn(colours=matlab.like2(10), trans=input$raw_trans)
shiny::runApp()
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
msbrowser::startApp()
library(devtools)
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
installpackageDescription("msbrowser")
packageDescription("msbrowser")
msbrowser::startApp()
install_github('tkimhofer/msbrowser')
msbrowser::startApp()
packageDescription("msbrowser")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(msbrowser)
library(msbrowser)
msbrowser::startApp()
runApp('R')
msbrowser::startApp()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
msbrowser::startApp()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_site()
pkgdown::build_site()
git status
devtools::document()
msbrowser::startApp()
msbrowser::startApp()
pkgdown::build_site()
msbrowser::startApp()
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
getOption("warn")
getOption('warn')
# suppress warnings
options(warn = -1)
getOption('warn')
msbrowser::startApp()
msbrowser::startApp()
install_github('msbrowser/devtools')
library(devtools)
install_github('tkimhofer/msbrowser')
msbrowser::startApp()
installed.packages()
installed.packages()$Package
!require('pacman')
!require(c('pacman', 'dds'))
?pload
?p_load
library(pacman)
deps=c('devtools', 'BiocManager')
deps %in% installed.packages()[,1]
deps=c('devtools', 'BiocManager')
id=deps %in% installed.packages()[,1]
id
!id
file.path('..', 'www', 'MSbrowser_logo_tricolour_alpha.png', fsep = .Platform$file.sep)
msbrowser::startApp()
install_github('tkimhofer/msbrowser')
msbrowser::startApp()
build_site()
build_site()
build_site()
build_site()
build_site()
install_github('tkimhofer/msbrowser')
msbrowser::startApp()
build_site()
msbrowser::startApp()
msbrowser::startApp()
R CMD INSTALL --preclean --no-multiarch --with-keep.source msbrowser
library(msbrowser)
msbrowser::startApp()
msbrowser::startApp()
library(msbrowser)
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
library(msbrowser)
library(msbrowser)
msbrowser::startApp()
git add *
file.path('www', 'MSbrowser_logo_tricolour_alpha.png', fsep = .Platform$file.sep)
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
file.path('MSbrowser_logo_tricolour_alpha.png', fsep = .Platform$file.sep)
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
msbrowser::startApp()
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
library(msbrowser)
file.path('extdata', 'www', 'logo.png', fsep = .Platform$file.sep), package='msbrowser')
file.path('extdata', 'www', 'logo.png', fsep = .Platform$file.sep)
file.path('www', 'logo.png', fsep = .Platform$file.sep)
file.path('www', 'logo.png', fsep = .Platform$file.sep)
system.file("www", package = "msbrowser")
addResourcePath('www',  system.file("www", package = "msbrowser"))
system.file("www", package = "msbrowser")
addResourcePath()
?addResourcePath()
addResourcePath('www',  system.file("www", package = "msbrowser"))
system.file("extdata/www", package = "msbrowser")
library(msbrowser)
system.file("extdata/www", package = "msbrowser")
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
sessionInfo()
devtools::document()
devtools::install.github('tkimhofer/msbrowser')
devtools::install_github('tkimhofer/msbrowser')
devtools::install_github('tkimhofer/msbrowser')
devtools::install_github('tkimhofer/msbrowser', build_opts = c("--preclean", "--no-multiarch",
"--with-keep.source"))
msbrowser::startApp()
devtools::document()
devtools::install_github('tkimhofer/msbrowser')
msbrowser::startApp()
package_info('colorRamps')
package_info('DT')
package_info('ggplot2')
package_info('graphics')
package_info('plotly')
package_info('shinyBS')
package_info('shinybusy')
package_info('shinycss')
package_info('shinycssloaders')
package_info('shinyWidgets')
package_info('stats')
package_info('xcms')
devtools::document()
library(msbrowser)
msbrowser::startApp()
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
paste('a', 'b', 'c')
paste('a', 'b', 'c', sep='\n')
?renderText
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
event.data
as.numeric(event.data$x[1])
as.numeric(event.data$x[1])
as.numeric(pars$mspec_scant)
uiE_target
library(msbrowser)
msbrowser::startApp()
pkgdown::build_site()
pkgdown::build_site()
install_github('tkimhofer/msbrowser')
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
msbrowser::startApp()
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
ls()
data.frame(Descr=c('Scantime range', 'Scan frequency', 'Mass range', 'Median ion count of all scans', 'Counts at p(x<=X)=0.98'),
Value=c(paste(paste(round(range(raw_xcms@scantime)), collapse = '-'), 's'),
paste(round(1/median(diff(raw_xcms@scantime[order(raw_xcms@scanindex)]))), 'scans per s'), paste(paste(round(raw_xcms@mzrange), collapse = '-'), 'm/z'),
paste(format(median(raw_xcms@tic), scientific = T, digits = 3), 'AU'),
paste(pars$noise98p, 'AU'))
)
library(msbrowser)
)
msbrowser::startApp()
msfile``
msfile1
pars$msfile
ui_ind
ui_ind$ichron
removeTab()
?ramoveTab
?removeTab
library(msbrowser)
msbrowser::startApp()
helpText('Database table records - these are highly method specific. Please refer to the', a('Wiki', href='https://github.com/tkimhofer/msbrowser/wiki/Database-Table-Editting', target="_blank"), 'for edditing instructions.')
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
library(msbrowser)
msbrowser::startApp()
file.path('inst', 'extdata', 'signalDB.csv', fsep = .Platform$file.sep)
system.file('signalDB.csv')
system.file(file.path('inst', 'extdata', 'signalDB.csv', fsep = .Platform$file.sep))
system.file(file.path('inst', 'extdata', 'signalDB.csv', fsep = .Platform$file.sep), package='msbrowser')
system.file(file.path('extdata', 'signalDB.csv', fsep = .Platform$file.sep), package='msbrowser')
system.file(file.path('extdata', 'signalDB.csv', fsep=.Platform$file.sep), package='msbrowser')
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(msbrowser)
system.file(file.path('extdata', 'signalDB.csv', fsep=.Platform$file.sep), package='msbrowser')
msbrowser::startApp()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
build_vignettes()
?build_vignettes
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_site()
pkgdown::build_articles()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(msbrowser)
pkgdown::build_site()
msbrowser::startApp()
library(msbrowser)
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(msbrowser)
deps=c('devtools', 'BiocManager')
id=deps %in% installed.packages()[,1]
if(any(!id)) install.packages(deps[id])
if(!required(xcms)){BiocManager::install('xcms')}
?require
required(xcms)
require(xcms)
git fetch --all
requireNamespace("xcms", quietly = TRUE)
requireNamespace("xcms", quietly = F)
?requireNamespace
requireNamespace("xcms", quietly = F, versionCheck=list(op = ">=", version = "3.6"))
sessionIn
sessionInfo()
library(xcms)
sessionInfo()
?install
pkgdown::build_site()
pkgdown::build_site()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
ui_ind$nopeaks
raw_data()[[2]]
raw_xcms=raw_data()[[2]] # this is xcms object
target.rt=as.numeric(input$in_rt)
target.mz=as.numeric(input$in_mz)
wind.rt=input$in_rt_ws/2
wind.mz=input$in_mz_ws/2
mf=ttt()
head(mf)
head(ttt())
req(ttt())
is.null(ttt())
req(ttt)
ttt()
exists(ttt())
exists(ttt)
exists(mf)
mf=ttt()
tryCatch()
?tryCatch()
tryCatch(ttt(), error=function(){dat_pl()})
ttt()
ttt()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
library(msbrowser)
msbrowser::startApp()

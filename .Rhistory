document()
devtools::create("msbrowser")
instsall.packages('devtools')
insstall.packages('devtools')
install.packages('devtools')
install.packages("devtools")
devtools::create("msbrowser")
devtools::create("../msbrowser1")
msbrowser::startApp()
install.packages(lattice)
'install.packages('lattice)
'install.packages('lattice'')
'install.packages('lattice')
install.packages('lattice')
library(MSnbase)
library(lattice)
install.packages('MSnbase')
install.packages("MSnbase")
shiny::runApp('R')
icst=read.table('/Volumes/Torben_1/Rproj/msbrowser/inst/extdata/Pre-defined Signals.csv', sep=',', stringsAsFactors = F, comment.char ='#', blank.lines.skip = T,row.names = NULL, skip=1, col.names = c('assay', 'compound', 'mz', 'rt', 'info'))
runApp('R')
shiny::runApp('R')
runApp('R')
runApp('R')
HTML()
?HTML()
?tags
runApp('R')
runApp('R')
runApp('R')
library(msbrowser1)
library(msbrowser1)
msbrowser::startApp()
msbrowser1::startApp()
devtools::use_package().
devtools::use_package()
library(devtools)
usethis::use_package()
library(msbrowser)
library(msbrowser)
msbrowser::startApp()
runApp('R')
library(msbrowser)
msbrowser::startApp()
runApp('R')
runApp('R')
runApp('R')
getwd()
icst=read.table('inst/extdata/signalDB.csv', sep=',', stringsAsFactors = F, comment.char ='#', blank.lines.skip = T,row.names = NULL, skip=1, col.names = c('assay', 'compound', 'mz', 'rt', 'info'))
runApp('R')
print(getwd())
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
shiny::runApp('R')
library(msbrowser)
msbrowser::startApp()
runApp('R')
runApp('R')
system.file(package='msbrowser1')
runApp('R')
library(msbrowser)
msbrowser::startApp()
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(dplyr)
group_by_all(mtcars)
mtcars
group_by_if(iris, is.factor)
iris %>%
group_by(vars(Species))
iris %>%
group_by_at(vars(Species))
iris %>%
group_by_at(vars(Species)) %>%
select(vars('Sepa.Length'))
iris %>%
group_by_at(vars(Species)) %>%
select(vars(Sepal.Length))
iris %>%
group_by_at(vars(Species)) %>%
select(Species)
iris %>%
group_by_at(vars(Species)) %>%
select(Sepal.Length)
iris %>%
group_by_at(vars(Species)) %>%
select(Sepal.Length) %>%
summarise(
arr = mean(Sepal.Length, na.rm = TRUE)
)
test=iris %>%
group_by_at(vars(Species)) %>%
select(Sepal.Length) %>%
summarise(
arr = mean(Sepal.Length, na.rm = TRUE)
)
test
head(iris)
iris %>%
group_by_at(vars(Species)) %>%
select(Sepal.Length, Sepal.Width)
iris %>%
group_by_at(vars(Species)) %>%
select(Sepal.Length, Sepal.Width) %>%
c(Sepal.Width[which.max(Sepal.Length)], Sepal.Width[which.max(Sepal.Length)])
iris %>%
group_by_at(vars(Species)) %>%
select(Sepal.Length, Sepal.Width) %>%
{which.max(Sepal.Length) }
library(plyr)
ddply(iris, .(Species), function(x){
mean(x$Sepal.Length)
})
as.quoted('Species')
ddply(iris, as.quoted('Species'), function(x){
mean(x$Sepal.Length)
})
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
shiny::runApp('R')
library(shiny)
sessionInfo()
library(plotly)
sessionInfo()
library(plyr)
sessionInfo()
?magrittr
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
msbrowser::startApp()
library(msbrowser)
msbrowser::
?msbrowser
??msbrowser
library(msbrowser)
library(msbrowser)
msbrowser::startApp()
sessionInfo
sessionInfo()
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
getwd()
library(msbrowser)
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(shiny)
div(id ="div_xic", fluidRow(
column(8,  numericRangeInput(inputId='xic_ra', label=NA, value=c(500), separator = " to ", width='100%')),
column(4,  actionButton('go_xic', 'Go'))
))
library(shinyWidgets)
div(id ="div_xic", fluidRow(
column(8,  numericRangeInput(inputId='xic_ra', label=NA, value=c(500), separator = " to ", width='100%')),
column(4,  actionButton('go_xic', 'Go'))
))
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
onclick
oneventHelper
shinyjs:::oneventHelper
sprintf("shinyjs-%s-%s-input-%s")
?sprintf
sprintf("%f", pi)
sprintf("%s", pi)
library(msbrowser)
shinyjs:::oneventHelper
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
runApp('R')
library(msbrowser)
msbrowser:::startApp()
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
library(msbrowser)
msbrowser:::startApp()
library(msbrowser)
getwd()
msbrowser:::startApp()
icst=read.table('inst/extdata/signalDB.csv', sep=',', stringsAsFactors = F, comment.char ='#', blank.lines.skip = T,row.names = NULL, skip=1, col.names = c('assay', 'compound', 'mz', 'rt', 'info'))
icst=icst[icst$assay!='' & !is.na(icst$assay),]
icst
names(icst[[1]])
dlply(icst, .(assya))
dlply(icst, .(assay))
ddlply(icst, .(assay))
library(plyr)
ddply(icst, .(assay))
dlply(icst, .(assay))
icst=dlply(icst, .(assay))
names(icst)
icst=read.table('inst/extdata/signalDB.csv', sep=',', stringsAsFactors = F, comment.char ='#', blank.lines.skip = T,row.names = NULL, skip=1, col.names = c('assay', 'compound', 'mz', 'rt', 'info'))
icst=icst[icst$assay!='' & !is.na(icst$assay),]
icst
unique(icst$assay)
library(msbrowser)
msbrowser::startApp()
msbrowser::startApp()
msbrowser::startApp()
msbrowser::startApp()
test=unzip('inst/extdata/mzXML/Urine_HILIC_ESIpos.mzXML.zip')
test'
test
list.files()
test=unzip('inst/', 'extdata/mzXML/Urine_HILIC_ESIpos.mzXML.zip')
test=unzip('inst/extdata/mzXML/Urine_HILIC_ESIpos.mzXML.zip', exdir = 'inst/extdata')
test
unzip('inst/extdata/mzXML/Urine_HILIC_ESIpos.mzXML.zip', exdir = 'inst/extdata')
?exists
list.files()
list.files(''inst/extdata/mzXML/Urine_HILIC_ESIpos.mzXML'')
list.files('inst/extdata/mzXML/Urine_HILIC_ESIpos.mzXML')
git status
ls
shinyApp()
?shinyApp()
?runApp()
library(msbrowser)
msbrowser::startApp()
sessionInfo()
shiny::runApp('R')
library(msbrowser)
shiny::runApp('R')
msbrowser:::startApp()
msbrowser:::startApp()
length(idx)
peaktbl[idx,]
ptbl=peaktbl[idx,]
ptbl=ptbl[order(ptbl$maxo, decreasing = T),]
ptbl$roi=as.character(1:nrow(ptbl))
ptbl
noi=as.numeric(input$in_noisethr)
noi
input$in_noise
input$in_noisethr
input$in_noise
pars$noise_plot
idc=unlist(dlply(ptbl, as.quoted('roi'), function(peak, ds=mf){
which(ds$mz>=peak$mzmin & ds$mz<=peak$mzmax & ds$scantime >= peak$rtmin & ds$scantime <= peak$rtmax)
}))
df=mf
df$peak='No'
df$peak[idc]='Yes'
ggplot()+
geom_point(data=subset(df, peak=='No'), aes(scantime, mz, colour=Int), size=0.1)+
geom_rect(data=ptbl, aes(xmin=rtmin, xmax=rtmax, ymin=mzmin, ymax=mzmax),  size=1 , color='darkgrey', fill='darkgrey')+
geom_point(data=subset(df, peak=='Yes'), aes(scantime, mz, colour=Int), size=1)+
geom_text(data=ptbl, aes(x=rtmax, y=mzmin, label=roi), colour='red', size=5, hjust=0, vjust=0)+
theme_bw()+
scale_x_continuous(sec.axis = sec_axis(trans=~./60, name='Scantime (min)'))+
labs(x='Scantime (s)', y='m/z', colour='Intensity')
msbrowser:::startApp()
msbrowser:::startApp()
input$raw_trans
is.null(input$raw_trans)
msbrowser:::startApp()
msbrowser:::startApp()
library(msbrowser)
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
as.logical('T')
as.logical('F')
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
DT::renderDataTable(out,
server=F,
selection = 'multiple',
escape = FALSE,
extensions = 'Buttons',
options = list(
dom='Bfrtips',
searchHighlight = TRUE,
pageLength = 20,
rownames= FALSE,
buttons = c('copy', list(extend='csv', filename='test', list(extend='excel', filenames='here'), 'print'))
),
rownames= FALSE)
renderDataTable(out,
server=F,
selection = 'multiple',
escape = FALSE,
extensions = 'Buttons',
options = list(
dom='Bfrtips',
searchHighlight = TRUE,
pageLength = 20,
rownames= FALSE,
buttons = c('copy', list(extend='csv', filename='test', list(extend='excel', filenames='here'), 'print'))
),
rownames= FALSE)
datatable(out,
server=F,
selection = 'multiple',
escape = FALSE,
extensions = 'Buttons',
options = list(
dom='Bfrtips',
searchHighlight = TRUE,
pageLength = 20,
rownames= FALSE,
buttons = c('copy', list(extend='csv', filename='test', list(extend='excel', filenames='here'), 'print'))
)
,
rownames= FALSE)
datatable(out,
selection = 'multiple',
escape = FALSE,
extensions = 'Buttons',
options = list(
dom='Bfrtips',
searchHighlight = TRUE,
pageLength = 20,
rownames= FALSE,
buttons = c('copy', list(extend='csv', filename='test', list(extend='excel', filenames='here'), 'print'))
),
rownames= FALSE)
datatable(out,
selection = 'multiple',
escape = FALSE,
extensions = 'Buttons',
options = list(
dom='Bfrtips',
searchHighlight = TRUE,
pageLength = 20,
rownames= FALSE,
buttons = c('copy', 'csv', 'excel''print')
),
rownames= FALSE)
datatable(out,
selection = 'multiple',
escape = FALSE,
extensions = 'Buttons',
options = list(
dom='Bfrtips',
searchHighlight = TRUE,
pageLength = 20,
rownames= FALSE,
buttons = c('copy', 'csv', 'excel', 'print')
),
rownames= FALSE)
datatable(out,
selection = 'multiple',
escape = FALSE,
extensions = 'Buttons',
options = list(
dom='Bfrtips',
searchHighlight = TRUE,
pageLength = 30,
rownames= FALSE,
buttons = c('copy', 'csv', 'excel', 'print', filename='ttt')
),
rownames= FALSE)
datatable(out,
selection = 'multiple',
escape = FALSE,
extensions = 'Buttons',
options = list(
dom='Bfrtips',
searchHighlight = TRUE,
pageLength = 30,
rownames= FALSE,
buttons = c('copy', 'csv', 'excel', 'print', list(options=filename='ttt'))
),
rownames= FALSE)
datatable(out,
selection = 'multiple',
escape = FALSE,
extensions = 'Buttons',
options = list(
dom='Bfrtips',
searchHighlight = TRUE,
pageLength = 30,
rownames= FALSE,
buttons = list('copy', 'csv', 'excel', 'print', list(options=filename='ttt'))
),
rownames= FALSE)
datatable(out,
selection = 'multiple',
escape = FALSE,
extensions = 'Buttons',
options = list(
dom='Bfrtips',
searchHighlight = TRUE,
pageLength = 30,
rownames= FALSE,
buttons = c('copy', 'csv', 'excel', 'print')
),
rownames= FALSE)
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
msbrowser:::startApp()
devtools::install_github('tkimhofer/msbrowser')
msbrowser::rstartApp()
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
msbrowser::startApp()
msbrowser::startApp()
devtools::install_github('tkimhofer/msbrowser')
msbrowser::startApp()

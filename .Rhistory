library(shiny); source('app.R')
install.packages('shinyjs')
install.packages('DT')
install.packages('scales')
install.packages('MSnbase')
install.pacakges('reshape2')
pwd
install.packages('reshape2')
runApp()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MSnbase")
install.packages('xcms')
BiocManager::install('xcms')
library(xcms)
install.packages("colorRamps")
library(ggplot2)
runApp()
install.packages('plotyly')
install.packages('plotly')
runApp()
runApp()
install.packages()
install.packages('shinytWidgets')
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
runApp()
df=ttt()
head(df)
input$xic_mzrange
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df=ttt()
xic=ddply(df[df$mz>=input$xic_mzrange[1] & df$mz<=input$xic_mzrange[2],], .(scantime), sum)
dim(df)
df=ttt()
df=raw_data()[[1]]
head(df)
xic=ddply(df[df$mz>=input$xic_mzrange[1] & df$mz<=input$xic_mzrange[2],], .(scantime), sum)
plot_ly(xic, x = ~scantime, y = ~V1, type = 'scatter', mode = 'lines', line=list(color='blue'))
head(xic)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
ls()
list.files()
file.choose()
runApp()
runApp()
runApp()
df=data.frame(a=1:30, b=3:30)
df=data.frame(a=1:30, b=1:30)
ggplot(df, aes(a, b))+geom_point()+labs(main='a', sub=b)
ggplot(df, aes(a, b))+geom_point()+labs(main='a', sub='b')
ggplot(df, aes(a, b))+geom_point()+labs(title='a', sub='b')
?labs
ggplot(df, aes(a, b))+geom_point()+labs(title='a', subtitle='b')
ggplot(df, aes(a, b))+geom_point()+labs(title='a', subtitle='b', caption='here')
runApp()
shiny::runApp()
runApp()
runApp()
pp1
runApp()
runApp()
df=ddply(pp1, .(roi), function(peak, ds=df){
#browser()
idx=which(ds$mz>=peak$mzmin & ds$mz<=peak$mzmax & ds$scantime >= peak$rtmin & df$scantime <= peak$rtmax)
ds$peak=0
ds$peak[idx]=peak$roi
ds
})
head(df)
head(pp1)
df=ddply(pp1, .(roi), function(peak, ds=df){
#browser()
idx=which(ds$mz>=peak$mzmin & ds$mz<=peak$mzmax & ds$scantime >= peak$rtmin & df$scantime <= peak$rtmax)
ds$peak=0
ds$peak[idx]=peak$roi
ds
})
dim(df)
head(df)
table(df$peak)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
source('~/Rproj/msbrowser/ui_helper.R')
source('app.R')
runApp()
library(shiny); source('app.R')
source('app.R')
source('app.R')
source('app.R')
shiny::runApp()
shiny::runApp()
library(shinyBS)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# define internal chemical standard m/z and rt
icst=list(
bruker=list(
hpos=data.frame(ID=c('Adenosine-2-d1 (M+H)', 'Adenine-2-d1 (M+H)', '2-aminoethane-d4-sulfonic acid(taurine-d4) (M+H)',
'Creatinine-(methyl-d3) (M+H)', 'L-arginine-13C6 (M+H)', 'Uracil-2-13C,15N2 (M+H)',
'L-phenylalanine-13C9,15N (M+H)', 'N-benzoyl-d5-glycine (hippuric acid) (M+H)', 'Leucine Enkephalin (M+H)',
'D-Sorbitol-13C6 (M+Na)', 'L-tryptophan-(indole-d5) (M+H)'),
mz=c(269.1109, 137.0686, 130.0476, 135.0961, 181.1396, 116.0325, 176.1140, 185.0975, 556.2771, 211.0889, 210.1291),
rt=c(98.4, 124.2, 150.0, 295.8, 350.4, 49.8, 216.0, 66.0, 198.6, 93.6, 212.4),
stringsAsFactors = F),
hneg=data.frame(ID=c('Adenosine-2-d1 (M+H)', 'Adenine-2-d1 (M+H)', '2-aminoethane-d4-sulfonic acid(taurine-d4) (M+H)',
'Creatinine-(methyl-d3) (M+H)', 'L-arginine-13C6 (M+H)', 'Uracil-2-13C,15N2 (M+H)',
'L-phenylalanine-13C9,15N (M+H)', 'N-benzoyl-d5-glycine (hippuric acid) (M+H)', 'Leucine Enkephalin (M+H)',
'D-Sorbitol-13C6 (M+Na)', 'L-tryptophan-(indole-d5) (M+H)'),
mz=c(269.1109, 137.0686, 130.0476, 135.0961, 181.1396, 116.0325, 176.1140, 185.0975, 556.2771, 211.0889, 210.1291),
rt=c(98.4, 124.2, 150.0, 295.8, 350.4, 49.8, 216.0, 66.0, 198.6, 93.6, 212.4),
stringsAsFactors = F)
)
)
iicst
icst
names(icst)
names(icst[[1]])
runApp()
runApp()
tab_ind
tab_ind$ichron
tab_ind$ichron
insertUI(
selector = "#tabs_in",
where = "afterEnd",
ui = uiT_ichron
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pc_act()
dats=pc_act()
print(dats)
output$selection <- renderText({
paste('Signal:', raw_data()[[4]], 's', round(dats$x[1], 4), 'm/z')
})
print('updating feature information')
updateNumericInput(session, inputId='in_rt', value=raw_data()[[4]])
updateNumericInput(session, inputId='in_mz', value=round(dats$x[1], 4))
updateNumericInput(session, inputId='in_noisethr', value=round(as.numeric(raw_data()[[5]])))
print('get feature information')
mf=raw_data()[[1]]
as.numeric(input$in_rt)
as.numeric(input$in_mz)
print('click on mass spectrum')
updateRadioButtons(session, 'target_input',  selected='click')
dats=pc_act()
print(dats)
output$selection <- renderText({
paste('Signal:', raw_data()[[4]], 's', round(dats$x[1], 4), 'm/z')
})
print('updating feature information')
updateNumericInput(session, inputId='in_rt', value=raw_data()[[4]])
updateNumericInput(session, inputId='in_mz', value=round(dats$x[1], 4))
updateNumericInput(session, inputId='in_noisethr', value=round(as.numeric(raw_data()[[5]])))
mf=raw_data()[[1]]
dim(mf)
target.rt=as.numeric(input$in_rt)
target.mz=as.numeric(input$in_mz)
# create sub with fixed equidist window size from target signal
wind.rt=input$in_rt_ws/2
wind.mz=input$in_mz_ws/2
ra.rt=c(max(target.rt-wind.rt, min(mf$scantime)), min(target.rt+wind.rt, max(mf$scantime)))
ra.mz=c(max(target.mz-wind.mz, min(mf$mz)), min(target.mz+wind.mz, max(mf$mz)))
idx=which(mf$mz>ra.mz[1] & mf$mz<ra.mz[2] & mf$scantime>ra.rt[1] & mf$scantime<ra.rt[2])
print(length(idx))
sub=mf[idx,]
dim(sub)
input$in_noisethr
noi=input$in_noisethr
print(noi)
df=sub
ggplot()+
geom_point(data=subset(df, Int<=noi), aes(scantime, mz, colour=Int), size=0.1)+
geom_point(data=subset(df, Int>noi), aes(scantime, mz, colour=Int), size=1)+
theme_bw()+
labs(x='Scantime (s)', y='m/z', colour='Int',  caption='Raw Data')
is.null(input$raw_trans)
input$raw_trans
g1=ggplot()+
geom_point(data=subset(df, Int<=noi), aes(scantime, mz, colour=Int), size=0.1)+
geom_point(data=subset(df, Int>noi), aes(scantime, mz, colour=Int), size=1)+
theme_bw()+
labs(x='Scantime (s)', y='m/z', colour='Int',  caption='Raw Data')
g1+scale_colour_gradientn(colours=matlab.like2(10), trans=input$raw_trans)
shiny::runApp()
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
msbrowser::startApp()
library(devtools)
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
msbrowser::startApp()
library(msbrowser)
installpackageDescription("msbrowser")
packageDescription("msbrowser")
msbrowser::startApp()
install_github('tkimhofer/msbrowser')
msbrowser::startApp()
packageDescription("msbrowser")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
